#!/usr/bin/env python
import argparse
import logging
import operator
import datetime
import os
import urllib

from reviewrot.mailer import Mailer
from reviewrot import GerritService, get_git_service
from reviewrot import get_arguments, load_config_file
from os.path import expanduser
from jinja2 import FileSystemLoader, Environment
from reviewrot.basereview import BaseReview

format_duration = BaseReview.format_duration

import warnings
warnings.filterwarnings("ignore", module='urllib')

log = logging.getLogger(__name__)

# Characters to include at the beginning and end of reports
report_prefixes = {'oneline': '', 'indented': '', 'json': '['}
report_suffixes = {'oneline': '', 'indented': '', 'json': ']'}


def main(cli_args, valid_choices):
    """
    Reads input configuration file.
    Calls appropriate git service with suitable inputs.
    Args:
        cli_args (argparse.Namespace): Arguments provided by command line
                                       interface
        valid_choices (dict): valid values of choices for arguments
    """
    config = load_config_file(cli_args.config)

    arguments = get_arguments(cli_args, config.get('arguments'), valid_choices)

    if arguments.get('debug'):
        log.setLevel(level=logging.DEBUG)

    results = []

    for item in config.get('git_services', []):
        if 'type' not in item:
            log.debug('git service type not found for %s', item)
            raise KeyError('git service not found for %s' % item)

        # get git service
        git_service = get_git_service(item['type'])

        """
        check if username and/or repository information is given for
        specified git service
        """
        if item['repos'] is not None:
            # for each input call specified git service
            for data in item['repos']:
                """
                split and format username and repository name to further
                request pull requests
                """
                res = format_user_repo_name(data, git_service)
                """
                get pull/merge/change requests for specified git service
                """
                token = item.get('token')
                # Support pulling a token from an environment variable
                # If the token value starts with "ENV.", then the value
                # for the token will be pulled from the environment variable
                # specified following "ENV."
                # For example, if the token value specified in the config is
                # "ENV.FOO", then the real value for the environment variable
                # will be taken from the environment variable "FOO"
                if token and token.startswith('ENV.'):
                    token_env_var = token.split('ENV.')[1]
                    token = os.environ.get(token_env_var)
                results.extend(
                    git_service.request_reviews(
                        user_name=res.get('user_name'),
                        repo_name=res.get('repo_name'),
                        state_=arguments.get('state'),
                        value=arguments.get('value'),
                        duration=arguments.get('duration'),
                        last_commented=arguments.get('last_commented'),
                        token=token,
                        host=item.get('host'),
                        ssl_verify=arguments.get('ssl_verify', False),
                    )
                )

    # Now, with all results in place, sort them and print
    if arguments.get('comment_sort'):
        sort_by = lambda result: result.last_comment.created_at if result.last_comment else datetime.datetime.utcfromtimestamp(0)
    else:
        sort_by = operator.attrgetter('time')
    sorted_results = sorted(
        results,
        key=sort_by,
        reverse=arguments.get('reverse'),
    )
    formatting = arguments.get('format', 'oneline')

    n = len(results)
    print(report_prefixes[formatting])
    for i, result in enumerate(sorted_results):
        print(result.format(style=formatting, i=i, N=n))
    print(report_suffixes[formatting])

    if arguments.get('irc'):
        # TODO


        log.debug("SENT")

    if args.email:
        log.debug("SENDING MAIL")

        loader = FileSystemLoader(searchpath='reviewrot/')

        env = Environment(loader=loader)
        env.filters['formatduration'] = format_duration

        TEMPLATE_FILE = "html_template.jinja"
        template = env.get_template(TEMPLATE_FILE)

        ouputText = template.render({"results" : sorted_results})

        mailer = Mailer()

        mailer.send(args.email, "review-rot notification", ouputText)
        log.debug("EMAIL SENT")



def format_user_repo_name(data, git_service):
    """
    Takes input from configuration file for a specified git service.
    Split or format it as required.
    Args:
        data (str): combination of username and/or reponame
        git_service (BaseService) : Git service object
    Returns:
        Dictionary representation of username and reponame
    """
    user_name = None
    repo_name = None

    if isinstance(git_service, GerritService):
        # convert "/" if any into escape character for html request
        repo_name = urllib.quote_plus(data)
    elif '/' in data:
        # Splitting only once in case "/" is a valid character in the data.
        user_name, repo_name = data.split('/', 1)
    else:
        user_name = data

    return {'user_name': user_name, 'repo_name': repo_name}


if __name__ == '__main__':

    duration_choices = ['y', 'm', 'd', 'h', 'min']
    state_choices = ['older', 'newer']
    format_choices = ['oneline', 'indented', 'json']

    choices = {'duration': duration_choices, 'state': state_choices,
               'format': format_choices}

    parser = argparse.ArgumentParser(
        description='Lists pull/merge/change requests for github, gitlab,'
                    ' pagure and gerrit')
    default_config = expanduser('~/.reviewrot.yaml')
    parser.add_argument('-c', '--config',
                        default=default_config,
                        help='Configuration file to use.')
    parser.add_argument('-s', '--state',
                        default=None,
                        choices=state_choices,
                        help="Pull requests state 'older' or 'newer'"
                        )
    parser.add_argument('-v', '--value',
                        default=None,
                        type=int,
                        help='Pull requests duration in terms of value(int)'
                        )
    parser.add_argument('-d', '--duration',
                        default=None,
                        choices=duration_choices,
                        help='Pull requests duration in terms of y=years,'
                             'm=months, d=days, h=hours, min=minutes')
    parser.add_argument('-f', '--format',
                        default=None,
                        choices=format_choices,
                        help='Choose from one of a few different styles.')
    parser.add_argument('--last-commented',
                        default=None,
                        type=int,
                        help='Display results with X days of inactivity')
    parser.add_argument('--reverse', action='store_true',
                        help='Display results with the latest first.')
    parser.add_argument('--comment-sort', action='store_true',
                        help='Display results with the latest comments first.')
    parser.add_argument('--debug', action='store_true',
                        help='Display debug logs on console')
    parser.add_argument('--irc', action='store_true',
                        help='send output to irc')
    parser.add_argument('--email', nargs="+",
                        default=None,
                        help='send output to list of email adresses')

    ssl_group = parser.add_argument_group('SSL')
    ssl_group.add_argument('-k', '--insecure',
                           default=False,
                           action='store_true',
                           help='Disable SSL certificate verification '
                                '(not recommended).')
    ssl_group.add_argument('--cacert',
                           default=None,
                           type=open,
                           help='Path to CA certificate to use for SSL '
                                'certificate verification.')

    args = parser.parse_args()
    options = (args.state, args.value, args.duration)
    if any(options) and not all(options):
        parser.error('Either no or all arguments are required')

    if args.debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    main(args, choices)
